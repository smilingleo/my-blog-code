webpackJsonp([0xb4c9175e8ac3],{455:function(e,n){e.exports={data:{markdownRemark:{html:'<p>从26号拿到机器，到现在，也使用了一段时间了，因为有用苹果笔记本及iPad的底子，使用起iOS来，有一些不适应，但也还好，总结一下使用感受吧。</p>\n<p>作为一个一直使用安卓手机的用户，刚刚切换都苹果系统，肯定会不适应，虽然我会时刻注意秉持客观的态度，但是，不可避免会受多年使用习惯的影响，有一些不公允的意见或结论。我只能尽力自省。</p>\n<p>鉴于很多数码博主已经对十三香的影像功能做了很深入的评测，这里忽略这一部分。</p>\n<h2>TLDR;</h2>\n<ul>\n<li>一般的观念里，iOS用户比安卓用户家底厚，存在“劫富济贫”的情况</li>\n<li>在人性化设计方面，安卓正在快速赶超iOS</li>\n<li>iOS很多设计让人感觉是一种不合潮流的倔强</li>\n<li>苹果闭源系统在有些方面要比开源系统更有优势。</li>\n</ul>\n<h2>吐槽部分</h2>\n<h3>本地化的应用商店</h3>\n<p>换新手机肯定要把应用搬家，除了通过自带的“转移到iOS”应用将通讯录，短信等数据同步到新手机上之外，对于应用程序，我只能用笨办法：一个一个地手动安装。</p>\n<p>可查找了几个常用app之后，我发现居然都找不到，比如：高德地图，喜马拉雅，酷我音乐等等。这些app可都是大厂作品，没有iOS版明显不合乎逻辑呀，折腾了半天之后才想起来，我的苹果账号地区设置的是美丽国。试着改到中国，哈，it works!</p>\n<p>看来iOS应用商店是一个账号两个系统，技术上应该可以做到如果用户查找的app在一个系统不存在，但是通过app name的语言，应该可以到对应地区的系统中搜索一下，如果存在就提醒一下用户。可处处讲究用户体验的苹果却没有这么做。</p>\n<h3>“劫富济贫”</h3>\n<p>我是一个Anki闪卡的老用户，在我印象里Anki也是一个公益免费app，毕竟AnkiDroid是开源的，AnkiWeb也是免费的。可当我在iOS应用商店中找到Anki时，发现它居然是一个收费应用，25美刀。好吧，就算我支持Anki的发展了。</p>\n<p>可我真想不通这背后的逻辑。</p>\n<h3>不一致的“回退”逻辑</h3>\n<p>安卓系统的回退操作逻辑很简单：在屏幕左右任意一侧划向中间，就可以返回上一级，如果已经是应用程序的首页，再返回就会返回到桌面。</p>\n<p>但是iOS的逻辑是：在应用程序中，只能从左侧划，当已经是应用程序的首页时，必须向上划才能返回桌面。应用中从左向右，退出应用从下向上，本身就不一致。更加糟糕的是很多应用里自定义了返回逻辑，比如微信朋友圈看照片时，多张照片左右划动换照片，但是返回操作却不是从左向右划了，而是<strong>单击</strong>。另外一些应用程序（比如Anki）的左侧是一个导航菜单，左侧右划会和滑出左侧导航菜单冲突。</p>\n<p>顺便吐槽一下微信，在安卓系统中，“发送”按钮就在输入框的同一水平的右侧。但是，iOS下却被放置在右下方，别扭。</p>\n<h3>手感</h3>\n<p>我用的是13 Pro Max，这边框实在是太宽了，加上又是非曲面屏，真的很硌手。立马怀念起我的Find X2 Pro。昨天在Vivo专卖店里试了试X70 Pro Plus，那轻盈的机身，圆润的手感，再摸摸自己兜里硌手的十三香，唉！</p>\n<p>硌手的情况在加上一个手机壳后有所改善。</p>\n<h3>反潮流</h3>\n<ul>\n<li>充电头居然不是usb c</li>\n<li>没有指纹识别。FaceID平时可能也还好，但是疫情期间，戴口罩解锁真麻烦。</li>\n<li>在快充大行其道的今天，安卓旗舰都65W, 120W了，苹果还20W，真心无语。</li>\n</ul>\n<h3>双拼支持</h3>\n<p>我是一个老“自然码”用户，但是iOS没有自然码输入法，有教程说通过imazing备份，修改plist文件后再恢复，就可以使用自然码双拼方案，可不小心改了设置就没了，还要花将近三百买正版imazing才能实现。干脆改用<code>小鹤双拼</code>了；因为Mac里也默认支持小鹤双拼了，至少有一个一致的体验。</p>\n<p>花了一小时学习新编码，就可以上手了，当时感觉转换应该挺简单，可十多天之后，我才发现我还是低估了二十多年来养成的肌肉记忆。<code>ou</code>, <code>iang</code>, <code>ing</code>, <code>iao</code>, <code>uai</code>, <code>ai</code>, <code>ou</code>, <code>ie</code>, <code>ei</code>, <code>un</code>, <code>ao</code>, <code>in</code>, 这些韵母和自然码不同的编码真的是折磨。</p>\n<h3>其他</h3>\n<ul>\n<li>没有工作日闹铃了</li>\n<li>没找到合适的门禁卡工具；</li>\n<li>\n<p>没有找到快捷方式（扫一扫）</p>\n<ul>\n<li>通过快捷指令实现</li>\n</ul>\n</li>\n<li>\n<p>OpenVPN 不支持按照应用设置规则</p>\n<ul>\n<li>找到一个<a href="https://www.codingmerc.com/blog/ios-vpn-on-demand-profile-with-openvpn/">教程</a>，还没来得及试。</li>\n</ul>\n</li>\n<li>没有息屏显示</li>\n<li>\n<p>息屏手电筒常被误触</p>\n<ul>\n<li>之前就奇怪很多苹果机用户的手机经常亮着闪光灯，现在才明白为什么。</li>\n</ul>\n</li>\n<li>截屏快捷键和安卓相反： up + 电源</li>\n</ul>\n<h2>优点</h2>\n<p>吐槽了半天，下面说说十三香的优点。</p>\n<h3>电池续航</h3>\n<p>我之前用的OPPO FindX2 Pro，因为用了120HZ高刷，那电量掉的叫一个快，把我一个燃油车主生生整成天天电量焦虑的电动车主。可换了十三香之后，得益于苹果ProMotion技术，那真是省电啊。</p>\n<p>想想安卓阵营，最早推出120hz高刷，可耗电问题却被后发的苹果超过，悲哀啊！</p>\n<h3>耳机效果不错</h3>\n<p>之前在安卓机上用AirPod，音质感觉还可以，但是连上同源的苹果机之后，感觉音质提升了一大截，有了环绕立体声的感觉，赞！</p>\n<h3>集成系统的好处</h3>\n<p>Note可以直接同步，很多应用数据（比如Notability, MarginNote）可以通过icloud在不同的苹果设备之间同步，很方便。</p>\n<p>虽然安卓机里也可以通过第三方系统，比如google drive, 百度网盘，dropbox等等实现，但是多系统的匹配，各种复杂的配置，导致用户体验很不好。</p>\n<h3>CarPlay系统</h3>\n<p>我的汽车上有CarPlay系统，但是以前用安卓系统一直没机会体验，换了苹果系统能用了，感受还可以，操作界面简洁，明了。界面上只保留地图，音乐，消息应用，让你专心开车。</p>\n<p>不过习惯把手机卡在控制台上方之后，感觉车的原屏幕设计有点低，每次还有特地低头去看，不太方便。</p>\n<h3>其他</h3>\n<ul>\n<li>公交卡可用，还很灵敏</li>\n<li>对于一些穿戴设备的适配较好，我跑步用唯乐小黑，刚换机跑完之后发现配速居然神奇的提升了。结合地图测距，发现还是苹果机的相对更准确些。可能是因为安卓机型太多，适配不免出现问题，而苹果机相对容易，所以更准确些。</li>\n<li>快捷方式app挺有用，就是手机上的no code，只是真用起来，还是像其他low code, no code系统一样，问题多多。</li>\n</ul>',frontmatter:{title:"一个安卓老用户换十三香之后的感受",date:"October 12, 2021",path:"/2021/iphone",tags:[],excerpt:""}}},pathContext:{prev:{html:"<p>This is a simple test</p>",id:"/volume1/homes/leo/github/my-blog-code/src/pages/2022/test.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2022-09-20T00:00:00.000+08:00",path:"/2022/test",title:"TEST TITLE",excerpt:"",tags:[]}},next:{html:'<p>这个标题其实不是非常准确，应该说是为什么状态机在<strong>异步分布式</strong>微服务实践中变得更重要。因为如果你的微服务还只是将原来的本地方法调用替换为同步的API调用，那么恭喜你，你将原来的monolithic变成了<code>distributed</code> monolithic，并成功地给自己找了很多的麻烦。</p>\n<p>用<a href="https://microservices.io/patterns/decomposition/self-contained-service.html">self-contained service</a>里提到的例子，如果所有的API调用都是同步的，那么你在开发的时候，你的关注重点会是API调用，异常处理，但是不会想到Order的状态问题。其实不是因为程序员没有这个思维，而是因为整个transaction在这个模式下是一个整体，人们的思维会自然地将其看做一个黑盒子，从这个角度考量整个API的成功与否，以及里面的实现细节（指令式思维），不会考虑Order的状态转换，考虑也没有用，因为这些转换是实现细节，是在黑盒子里面发生的，用户不可知。用户感知的仅仅是这个API是否成功，如果成功，那么这个Order自然应该是一个<code>Created</code>的状态，如果失败，那么整个transaction应该回滚，要么用户修改请求参数（4XX错误）并重发请求，要么直接重试(500错误).</p>\n<!-- language:uml -->\n<pre><code>Client -> OrderService: POST /orders\nactivate OrderService\nOrderService -> AccountService: POST /accounts/:id/validate\nAccountService --> OrderService: response\n\nOrderService -> KitchenService: POST /tickets\nKitchenService --> OrderService: response\n\nOrderService -> PaymentService: ...\nPaymentService --> OrderService: response\n\nOrderService --> Client: response\ndeactivate OrderService\n</code></pre>\n<p>当你的实现方式变成异步的(Saga模式)之后，系统的交互就变成了下面的这种方式：</p>\n<!-- language:uml -->\n<pre><code>Client -> OrderService: POST /orders\nactivate OrderService\nOrderService -> AccountService: validateAccount message\nOrderService --> Client: response\ndeactivate OrderService\n\nAccountService --> OrderService: reply message\nactivate OrderService\nOrderService -> KitchenService: createTicket message\ndeactivate OrderService\n\n\nKitchenService --> OrderService: reply message\nactivate OrderService\nOrderService -> PaymentService: ...\ndeactivate OrderService\n\nPaymentService --> OrderService: reply message\n</code></pre>\n<p>每个service都是一个独立(self-contained)系统，系统之间通过异步消息通讯。在这种架构模式下，原来的那种“黑盒子”思维就被打破了，你就被迫需要考虑更多的细节，比如Order的状态。</p>\n<!-- language:uml -->\n<pre><code>hide empty description\n[*] -> Pending: sent msg to validate account\nPending --> TicketCreated: Kitchen replied successfully\nTicketCreated --> PaymentCollected: Payment processed\nPaymentCollected --> Created: Received payment processed msg\nPending --> Invalid: invalid account\nCreated --> [*]\nInvalid --> [*]\n</code></pre>\n<p>因为从client的角度，<code>POST /orders</code>的response是一个异步的，带一个jobId, 用户之后每次查询order job信息，你都需要告知用户当前的order状态。</p>\n<p>有了这些状态之后，对于设计者来说，会帮助你对系统有更加深入的思考。比如，在等待的过程中，如果用户想cancel订单怎么办？ 有这个状态机就可以让你可以直观地和PM讨论，在什么情况下我们允许用户cancel订单，什么情况下不允许。</p>\n<!-- language:uml -->\n<pre><code>@startuml\nhide empty description\nskinparam state {\n    BackgroundColor&#x3C;&#x3C;Focus>> LightBlue\n}\nstate Canceled &#x3C;&#x3C;Focus>>\n\n[*] -> Pending: sent msg to validate account\nPending --> TicketCreated: Kitchen replied successfully\nTicketCreated --> PaymentCollected: Payment processed\nPaymentCollected --> Created: Received payment processed msg\nPending --> Invalid: invalid account\nPending --> Canceled: received cancel request\nCanceled --> [*]\nCreated --> [*]\nInvalid --> [*]\n@enduml\n</code></pre>',id:"/volume1/homes/leo/github/my-blog-code/src/pages/2020/为什么状态机在微服务架构下变得更重要.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2020-09-14T13:52:12.000+08:00",path:"/2020/src/pages/2020/",title:"为什么状态机在微服务架构下变得更重要",excerpt:"",tags:["微服务","状态机","设计"]}}}}}});
//# sourceMappingURL=path---2021-iphone-7d20c22d912935b36d09.js.map